from computeUI import computeQUI
from dit import *
import time

d1 = dit.Distribution(['000', '011', '101', '110'], [1. / 4] * 4) # XOR
d2 = dit.Distribution(['000', '011', '101', '110'], [0.1, 0.2, 0.3, 0.4]) # perturbed XOR
d3 = dit.Distribution(['000', '001', '010', '111'], [1. / 4] * 4) # AND
d4 = dit.Distribution(['012', '020', '101', '102', '120'], [0.421568114489, 0.0786651096858, 0.253963103031, 0.160027829754, 0.08577584304])
d5 = dit.Distribution(['012', '020', '101', '102', '120'], [0.4, 0.1, 0.25, 0.16, 0.09])
d6 = dit.Distribution(['000', '001', '010', '011', '100', '101', '110', '111'],
  [0.033333348023, 0.0666666740115, 0.0666666740115, 0.133333303954, 0.171428518128, 0.128571448728, 0.228571401696, 0.171428631448])
d7 = dit.Distribution(['000', '001', '010', '011', '101', '110', '200', '201', '210'],
  [0.00464987943077, 0.0159455072032, 0.00161909206555, 0.00134153842824, 0.452357030098, 0.186331210642, 0.00651647516163, 0.170868608161, 0.16037065881])
d8 = dit.Distribution(['010', '100', '101', '110', '111', '121'],
    [0.250766178235, 0.101750798968, 0.0920533030959, 0.0609473464827, 0.466445827817, 0.0280365454012])
d9 = dit.Distribution(['002', '011', '012', '100', '102', '111', '112', '122'],
    [0.167748246356, 0.00391032994228, 0.351521384625, 0.0353228914823, 0.00898089799626, 0.404681231646, 0.0186113432744, 0.00922367467759]) # Warning: Maximum number of iterations reached in outer loop.
d11 = dit.Distribution(['001', '010', '021', '110', '121', '201'],
    [0.167967184186, 0.0205698172054, 0.110877895765, 0.137539239956, 0.185423915657, 0.37762194723]) # Warning: Maximum number of iterations reached in inner loop.
d12 = dit.Distribution(['000', '010', '020', '102', '110', '122'],
    [0.0869196091623, 0.0218631235533, 0.133963681059, 0.164924698739, 0.429533105427, 0.16279578206])

# An example where the frank-wolfe implementation fails to give the right answer
# High dimensional random P: nx=ny=3, ns=ny*nz; UI(S;X\Y) = 0.08458 (Except frank-wolfe, other algos return the same answer); I(S;X) = 0.101612
# Total computation time (matlab adm): 13.178 sec       Iteration counts, outer/inner(max) (adm): 2520/102
# Total computation time (matlab fmincon): 1.21228 sec
# Total computation time (python adm): 12.9053 sec      Warning: Maximum number of iterations reached in outer loop.
# Total computation time (dit frank-wolfe): 7.5557 sec  FAILS to give right answer, returns UI(S;X\Y)0.0999647
d13 = dit.Distribution(['000','001','002','010','011','012','020','021','022',       '100','101','102','110','111','112','120','121','122',       '200','201','202','210','211','212','220','221','222',       '300','301','302','310','311','312','320','321','322',       '400','401','402','410','411','412','420','421','422',       '500','501','502','510','511','512','520','521','522',       '600','601','602','610','611','612','620','621','622',       '700','701','702','710','711','712','720','721','722',       '800','801','802','810','811','812','820','821','822',        ],
    [0.003149785425051,0.022628583336235,0.008168881626714,0.015137551347040,0.005701711096499,0.014101859681240,0.033245942646921,0.010126469307583,0.001504176470110 ,0.022524174006741,0.004390453627080,0.023049990752471,0.002081359619415,0.002317721727090,0.005241832710918,0.007207264387016,0.000781507149667,0.034408136850468 ,0.008677955981205,0.041283536564596,0.002884039524006,0.009038551834435,0.002183902309518,0.014592753886911,0.010181906213065,0.000586662809547,0.001050714974543 ,0.036222032038002,0.026389335080956,0.011086152881481,0.006580172428212,0.000665292869703,0.019447728449450,0.002457129980773,0.020066302933153,0.008782381910409 ,0.005361413549673,0.003153058516569,0.013636479645907,0.008015924356700,0.014898748967616,0.001531965684984,0.000091235628753,0.011527137364724,0.012033828243103 ,0.032426205637419,0.005167676112927,0.000318906172877,0.017708509949074,0.005907110657293,0.000276046680759,0.002090878573226,0.001455384109933,0.026375790347900 ,0.005545061129304,0.004604027076549,0.003540758564313,0.026358856506401,0.013135851798158,0.016213124297347,0.006462145696218,0.022493143089402,0.043144525785875 ,0.029894667398552,0.026612487471789,0.011290448539309,0.026886329679414,0.007403099215664,0.009980362671813,0.012176514713523,0.025004102204362,0.013961546896524 ,0.011125640313162,0.006177999282225,0.007031969119482,0.006403492862084,0.004166819111040,0.010126785200874,0.034695294042427,0.003963701566187,0.011680991130340])


d = d12

d.set_rv_names('SXY')

print(d)

start_time = time.time()
Q = computeQUI(distSXY = d, DEBUG = True)
print("--- %s seconds ---" % (time.time() - start_time))

print(Q)
UIX = dit.shannon.conditional_entropy(Q, 'S', 'Y') + dit.shannon.conditional_entropy(Q, 'X', 'Y') - dit.shannon.conditional_entropy(Q, 'SX', 'Y')
UIX2 = dit.shannon.entropy(Q, 'SY') + dit.shannon.entropy(Q, 'XY') - dit.shannon.entropy(Q, 'SXY') - dit.shannon.entropy(Q, 'Y')
# print(abs(UIX - UIX2) < 1e-10)
UIY = dit.shannon.conditional_entropy(Q, 'S', 'X') + dit.shannon.conditional_entropy(Q, 'Y', 'X') - dit.shannon.conditional_entropy(Q, 'SY', 'X')
SI = dit.shannon.mutual_information(Q, 'S', 'X') - UIX
SI2 = dit.shannon.entropy(Q, 'S') + dit.shannon.entropy(Q, 'X') - dit.shannon.entropy(Q, 'SX') - UIX
SI3 = dit.shannon.entropy(Q, 'S') + dit.shannon.entropy(Q, 'X') + dit.shannon.entropy(Q, 'Y') - dit.shannon.entropy(Q, 'SX') - dit.shannon.entropy(Q, 'SY') - dit.shannon.entropy(Q, 'XY') + dit.shannon.entropy(Q, 'SXY')

CI = dit.shannon.mutual_information(d, 'S', 'XY') - UIX - UIY - SI
CIQ = dit.shannon.mutual_information(Q, 'S', 'XY') - UIX - UIY - SI

print("CI_Q: ", CIQ)
# print(" CI : ", CI)
# print("UI_X: ", UIX)
# print("UI_Y: ", UIY)
# print(" SI : ", SI)
print("PID(R=", SI, ", U0=", UIX, ", U1=", UIY, ", S=", CI, sep = '')

start_time = time.time()
pid = algorithms.pid_broja(d, ['X', 'Y'], 'S')
print("--- %s seconds ---" % (time.time() - start_time))
print(pid)

# 000   0.00860108429859
# 002   0.433123101572
# 010   0.0935628938754
# 012   0.0765643629195
# 100   0.0140549784377
# 110   0.1158784993
# 111   0.0580668980072
# 112   0.0262670304045
# 201   0.151652574131
# 210   0.0222285770545
